/******************************************************************************
* The MIT License (MIT)
*
* Copyright (c) 2015-2020 Fredrik Lindh
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
* THE SOFTWARE.
******************************************************************************/

// VERTEX SHADER
////////////////

void MainVertexShader(float4 InPosition : ATTRIBUTE0, float2 InUV : ATTRIBUTE1, out float2 OutUV : TEXCOORD0, out float4 OutPosition : SV_POSITION)
{
	OutPosition = InPosition;
	OutUV = InUV;
}

// PIXEL SHADER
///////////////

Texture2D<uint> ComputeShaderOutput;
float4 StartColor;
float4 EndColor;
float2 TextureSize;
float BlendFactor;

// temarans' original for reference
void MainPixelShader(in float2 uv : TEXCOORD0, out float4 OutColor : SV_Target0)
{
	// First we need to unpack the uint material and retrieve the underlying R8G8B8A8_UINT values.
	uint packedValue = ComputeShaderOutput.Load(int3(TextureSize.x * uv.x, TextureSize.y * uv.y, 0));
	uint r = (packedValue & 0x000000FF);
	uint g = (packedValue & 0x0000FF00) >> 8;
	uint b = (packedValue & 0x00FF0000) >> 16;
	uint a = (packedValue & 0xFF000000) >> 24;
	
	// Here we will just blend using the TextureParameterBlendFactor between our simple color change shader and the input from the compute shader
	float alpha = length(uv) / length(float2(1, 1));
	float4 solidColorComponent = lerp(StartColor, EndColor, alpha) * (1.0 - BlendFactor);
	float4 computeShaderComponent = float4(r, g, b, a) / 255.0 * BlendFactor;
	OutColor = solidColorComponent + computeShaderComponent;
}
